import cv2
import time
import numpy as np
import HandTrackingModule as htm
import os
import matplotlib.pyplot as plt

tipIds = [4, 8, 12, 16, 20]
keyPoints = [0, 4, 5, 9, 13, 17, 8, 12, 16, 20]
gestNames = ['A']
knownGestures = [
    [[0., 0.47028507, 0.95736282, 1.27968668, 1.52187399, 1.09564217,
      1.39553071, 1.04116499, 0.94364559, 1.,         1.20515218, 0.8006999,
      0.81039716, 0.92758482, 1.10963081, 0.72675898, 0.73881463, 0.92485531,
      1.05248042, 0.78493514, 0.75588063],
     [0.47028507, 0.,         0.53307809, 0.89704029, 1.16624591, 0.80183434,
      1.09291653, 0.71258909, 0.63533244, 0.82447092, 0.99384539, 0.57964174,
      0.62232269, 0.88684922, 1.00775315, 0.66268744, 0.70549807, 1.01832433,
      1.07181617, 0.84209498, 0.85601264],
     [0.95736282, 0.53307809, 0.,         0.37852235, 0.6579986,  0.42027093,
      0.64315331, 0.30523963, 0.30607603, 0.61071186, 0.67836198, 0.4389822,
      0.49820722, 0.82160631, 0.83068359, 0.6716287,  0.72613334, 1.0639425,
      1.02244441, 0.90209266, 0.95555118],
     [1.27968668, 0.89704029, 0.37852235, 0.,         0.28050711, 0.30939903,
      0.32863215, 0.27322263, 0.37117171, 0.58057211, 0.51969505, 0.56293499,
      0.59906567, 0.84633459, 0.76332238, 0.7914582,  0.83678224, 1.12124336,
      1.01854746, 0.99658547, 1.06578312],
     [1.52187399, 1.16624591, 0.6579986,  0.28050711, 0.,         0.4488367,
      0.22662259, 0.48103447, 0.58042531, 0.67760783, 0.53067478, 0.75150873,
      0.77013922, 0.93781786, 0.79970595, 0.94722098, 0.9827509,  1.21086623,
      1.07343161, 1.11911326, 1.19330881],
     [1.09564217, 0.80183434, 0.42027093, 0.30939903, 0.4488367,  0.,
      0.30092838, 0.11505274, 0.16650562, 0.27134479, 0.26121042, 0.30496032,
      0.32137784, 0.53705971, 0.46493937, 0.50297377, 0.54279426, 0.81242762,
      0.71107268, 0.69380527, 0.76514367],
     [1.39553071, 1.09291653, 0.64315331, 0.32863215, 0.22662259, 0.30092838,
      0.,         0.38054315, 0.46279607, 0.4749132,  0.30755735, 0.59849639,
      0.60298843, 0.72472368, 0.57585592, 0.76231696, 0.79138642, 0.99378823,
      0.85015221, 0.91401118, 0.98911816],
     [1.04116499, 0.71258909, 0.30523963, 0.27322263, 0.48103447, 0.11505274,
      0.38054315, 0.,         0.10140475, 0.34581597, 0.37444805, 0.28996785,
      0.32655108, 0.59778404, 0.55643859, 0.51980436, 0.56670688, 0.86679587,
      0.78493514, 0.73124002, 0.79824828],
     [0.94364559, 0.63533244, 0.30607603, 0.37117171, 0.58042531, 0.16650562,
      0.46279607, 0.10140475, 0.,         0.30523963, 0.39114445, 0.19319758,
      0.23667776, 0.53387679, 0.52486194, 0.43015787, 0.47967436, 0.79432426,
      0.72937302, 0.64930718, 0.71334608],
     [1.,         0.82447092, 0.61071186, 0.58057211, 0.67760783, 0.27134479,
      0.4749132,  0.34581597, 0.30523963, 0.,         0.20901727, 0.24551424,
      0.20476097, 0.26765572, 0.22013723, 0.29893953, 0.31996051, 0.5440488,
      0.44130556, 0.44162728, 0.51613001],
     [1.20515218, 0.99384539, 0.67836198, 0.51969505, 0.53067478, 0.26121042,
      0.30755735, 0.37444805, 0.39114445, 0.20901727, 0.,         0.42236101,
      0.3977696,  0.42437386, 0.26903185, 0.50674353, 0.52312722, 0.6880495,
      0.54295124, 0.62154625, 0.69686917],
     [0.8006999,  0.57964174, 0.4389822, 0.56293499, 0.75150873, 0.30496032,
      0.59849639, 0.28996785, 0.19319758, 0.24551424, 0.42236101, 0.,
      0.0607681,  0.38800912, 0.44527848, 0.241666, 0.29395686, 0.62541885,
      0.59085367, 0.46828758, 0.52783018],
     [0.81039716, 0.62232269, 0.49820722, 0.59906567, 0.77013922, 0.32137784,
      0.60298843, 0.32655108, 0.23667776, 0.20476097, 0.3977696,  0.0607681,
      0.,         0.32724624, 0.391725, 0.19378481, 0.24307241, 0.56765844,
      0.53008565, 0.41455455, 0.47700206],
     [0.92758482, 0.88684922, 0.82160631, 0.84633459, 0.93781786, 0.53705971,
      0.72472368, 0.59778404, 0.53387679, 0.26765572, 0.42437386, 0.38800912,
      0.32724624, 0.,         0.20224847, 0.22586928, 0.19378481, 0.27642679,
      0.2029495,  0.20364813, 0.2773501],
     [1.10963081, 1.00775315, 0.83068359, 0.76332238, 0.79970595, 0.46493937,
      0.57585592, 0.55643859, 0.52486194, 0.22013723, 0.26903185, 0.44527848,
      0.391725, 0.20224847, 0.,         0.38447901, 0.37208894, 0.43068583,
      0.27436388, 0.40351259, 0.4749132],
     [0.72675898, 0.66268744, 0.6716287, 0.7914582, 0.94722098, 0.50297377,
      0.76231696, 0.51980436, 0.43015787, 0.29893953, 0.50674353, 0.241666,
      0.19378481, 0.22586928, 0.38447901, 0.,         0.05487278, 0.39891057,
      0.41125237, 0.23059873, 0.2864195],
     [0.73881463, 0.70549807, 0.72613334, 0.83678224, 0.9827509,  0.54279426,
      0.79138642, 0.56670688, 0.47967436, 0.31996051, 0.52312722, 0.29395686,
      0.24307241, 0.19378481, 0.37208894, 0.05487278, 0.,         0.34441673,
      0.36631857, 0.17596133, 0.23414379],
     [0.92485531, 1.01832433, 1.0639425,  1.12124336, 1.21086623, 0.81242762,
      0.99378823, 0.86679587, 0.79432426, 0.5440488, 0.6880495,  0.62541885,
      0.56765844, 0.27642679, 0.43068583, 0.39891057, 0.34441673, 0.,
      0.18615895, 0.17788797, 0.17204334],
     [1.05248042, 1.07181617, 1.02244441, 1.01854746, 1.07343161, 0.71107268,
      0.85015221, 0.78493514, 0.72937302, 0.44130556, 0.54295124, 0.59085367,
      0.53008565, 0.2029495,  0.27436388, 0.41125237, 0.36631857, 0.18615895,
      0.,         0.26765572, 0.30939903],
     [0.78493514, 0.84209498, 0.90209266, 0.99658547, 1.11911326, 0.69380527,
      0.91401118, 0.73124002, 0.64930718, 0.44162728, 0.62154625, 0.46828758,
      0.41455455, 0.20364813, 0.40351259, 0.23059873, 0.17596133, 0.17788797,
      0.26765572, 0.,         0.07537355],
     [0.75588063, 0.85601264, 0.95555118, 1.06578312, 1.19330881, 0.76514367,
      0.98911816, 0.79824828, 0.71334608, 0.51613001, 0.69686917, 0.52783018,
      0.47700206, 0.2773501,  0.4749132,  0.2864195,  0.23414379, 0.17204334,
      0.30939903, 0.07537355, 0.]]
]
tol = 6

def findDistances(lmList): #calculates, for each node, its distance with all the 21 nodes (with itself too and it's 0)
    distMatrix=np.zeros([len(lmList), len(lmList)], dtype='float')
    palmSize=((lmList[0][1]-lmList[9][1])**2+(lmList[0][2]-lmList[9][2])**2)**(1./2.)
    for row in range(0,len(lmList)):
        for column in range(0,len(lmList)):
            distMatrix[row][column]=(((lmList[row][1]-lmList[column][1])**2+(lmList[row][2]-lmList[column][2])**2)**(1./2.))/palmSize
    return distMatrix

def findGesture(unknownGesture, knownGestures, keyPoints, gestNames, tol):
    #unknown gesture: gesture detected from webcam
    #knownGestures: array of all the gesture for each letter
    #keyPoints: all the key id of the hand
    #gestNames: array of all the Letters Names
    #tol: constant for error

    errorArray = []
    #For each gestName he finds the error between the gesture related to that Name and
    #the real time detected gesture
    for i in range(0, len(gestNames), 1):
        error = findError(knownGestures[i], unknownGesture, keyPoints)
        errorArray.append(error)
    errorMin = errorArray[0]
    minIndex = 0

    #finds the min in error array
    for i in range(0, len(errorArray), 1):
        if errorArray[i] < errorMin:
            errorMin = errorArray[i]
            minIndex = i
    if errorMin < tol:
        gesture = gestNames[minIndex]
    if errorMin >= tol:
        gesture = 'Unknown'
    return gesture

def findError(gestureMatrix, unknownMatrix, keyPoints):
    error = 0
    for row in keyPoints:
        for column in keyPoints:
            error = error + abs(gestureMatrix[row][column] - unknownMatrix[row][column])
    #print(error)
    return error

def fpsShow(img, pTime):
    cTime = time.time()
    fps = 1 / (cTime - pTime)
    pTime = cTime

    cv2.putText(img, f'FPS: {int(fps)}', (400, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)

def main():
    wCam, hCam = 640, 480

    cap = cv2.VideoCapture(0)
    cap.set(3, wCam)
    cap.set(4, hCam)

    pTime = 0

    detector = htm.handDetector(detectionCon=1)
    flag = True

    while cap.isOpened():
        success, img = cap.read()
        img = cv2.flip(img, 1)
        img = detector.findHands(img)
        lmList = detector.findPosition(img, draw=False)
        # print(lmList)


        if len(lmList) != 0: #if a hand is detected
            unknownGesture = findDistances(lmList)
            #if (flag):
            #    print(unknownGesture)
            #    flag = False
            myGesture = findGesture(unknownGesture, knownGestures, keyPoints, gestNames, tol)
            text = myGesture
            #text = "None"
            cv2.rectangle(img, (20, 225), (170, 425), (0, 255, 0), cv2.FILLED)
            cv2.putText(img, text, (45, 375), cv2.FONT_HERSHEY_PLAIN, 10, (255, 0, 0), 25)

        fpsShow(img, pTime) #Show fps number

        cv2.imshow("Image", img)
        cv2.waitKey(1)

    cv2.destroyAllWindows()
    cap.release()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(0)